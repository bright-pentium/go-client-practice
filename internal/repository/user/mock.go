// Code generated by mockery v2.43.2. DO NOT EDIT.

package user

import (
	context "context"

	domain "github.com/bright-pentium/go-client-practice/internal/domain"
	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// MockUserRepository is an autogenerated mock type for the IUserRepository type
type MockUserRepository struct {
	mock.Mock
}

type MockUserRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockUserRepository) EXPECT() *MockUserRepository_Expecter {
	return &MockUserRepository_Expecter{mock: &_m.Mock}
}

// CreateUser provides a mock function with given fields: ctx, ID, name, account, passwordHash
func (_m *MockUserRepository) CreateUser(ctx context.Context, ID uuid.UUID, name string, account string, passwordHash []byte) (*domain.User, error) {
	ret := _m.Called(ctx, ID, name, account, passwordHash)

	if len(ret) == 0 {
		panic("no return value specified for CreateUser")
	}

	var r0 *domain.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, string, string, []byte) (*domain.User, error)); ok {
		return rf(ctx, ID, name, account, passwordHash)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, string, string, []byte) *domain.User); ok {
		r0 = rf(ctx, ID, name, account, passwordHash)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, string, string, []byte) error); ok {
		r1 = rf(ctx, ID, name, account, passwordHash)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUserRepository_CreateUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateUser'
type MockUserRepository_CreateUser_Call struct {
	*mock.Call
}

// CreateUser is a helper method to define mock.On call
//   - ctx context.Context
//   - ID uuid.UUID
//   - name string
//   - account string
//   - passwordHash []byte
func (_e *MockUserRepository_Expecter) CreateUser(ctx interface{}, ID interface{}, name interface{}, account interface{}, passwordHash interface{}) *MockUserRepository_CreateUser_Call {
	return &MockUserRepository_CreateUser_Call{Call: _e.mock.On("CreateUser", ctx, ID, name, account, passwordHash)}
}

func (_c *MockUserRepository_CreateUser_Call) Run(run func(ctx context.Context, ID uuid.UUID, name string, account string, passwordHash []byte)) *MockUserRepository_CreateUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(string), args[3].(string), args[4].([]byte))
	})
	return _c
}

func (_c *MockUserRepository_CreateUser_Call) Return(_a0 *domain.User, _a1 error) *MockUserRepository_CreateUser_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUserRepository_CreateUser_Call) RunAndReturn(run func(context.Context, uuid.UUID, string, string, []byte) (*domain.User, error)) *MockUserRepository_CreateUser_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteUserByID provides a mock function with given fields: ctx, ID
func (_m *MockUserRepository) DeleteUserByID(ctx context.Context, ID uuid.UUID) error {
	ret := _m.Called(ctx, ID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteUserByID")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) error); ok {
		r0 = rf(ctx, ID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockUserRepository_DeleteUserByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteUserByID'
type MockUserRepository_DeleteUserByID_Call struct {
	*mock.Call
}

// DeleteUserByID is a helper method to define mock.On call
//   - ctx context.Context
//   - ID uuid.UUID
func (_e *MockUserRepository_Expecter) DeleteUserByID(ctx interface{}, ID interface{}) *MockUserRepository_DeleteUserByID_Call {
	return &MockUserRepository_DeleteUserByID_Call{Call: _e.mock.On("DeleteUserByID", ctx, ID)}
}

func (_c *MockUserRepository_DeleteUserByID_Call) Run(run func(ctx context.Context, ID uuid.UUID)) *MockUserRepository_DeleteUserByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *MockUserRepository_DeleteUserByID_Call) Return(_a0 error) *MockUserRepository_DeleteUserByID_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUserRepository_DeleteUserByID_Call) RunAndReturn(run func(context.Context, uuid.UUID) error) *MockUserRepository_DeleteUserByID_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserByAccount provides a mock function with given fields: ctx, account
func (_m *MockUserRepository) GetUserByAccount(ctx context.Context, account string) (*domain.User, error) {
	ret := _m.Called(ctx, account)

	if len(ret) == 0 {
		panic("no return value specified for GetUserByAccount")
	}

	var r0 *domain.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*domain.User, error)); ok {
		return rf(ctx, account)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *domain.User); ok {
		r0 = rf(ctx, account)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, account)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUserRepository_GetUserByAccount_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserByAccount'
type MockUserRepository_GetUserByAccount_Call struct {
	*mock.Call
}

// GetUserByAccount is a helper method to define mock.On call
//   - ctx context.Context
//   - account string
func (_e *MockUserRepository_Expecter) GetUserByAccount(ctx interface{}, account interface{}) *MockUserRepository_GetUserByAccount_Call {
	return &MockUserRepository_GetUserByAccount_Call{Call: _e.mock.On("GetUserByAccount", ctx, account)}
}

func (_c *MockUserRepository_GetUserByAccount_Call) Run(run func(ctx context.Context, account string)) *MockUserRepository_GetUserByAccount_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockUserRepository_GetUserByAccount_Call) Return(_a0 *domain.User, _a1 error) *MockUserRepository_GetUserByAccount_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUserRepository_GetUserByAccount_Call) RunAndReturn(run func(context.Context, string) (*domain.User, error)) *MockUserRepository_GetUserByAccount_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserByID provides a mock function with given fields: ctx, ID
func (_m *MockUserRepository) GetUserByID(ctx context.Context, ID uuid.UUID) (*domain.User, error) {
	ret := _m.Called(ctx, ID)

	if len(ret) == 0 {
		panic("no return value specified for GetUserByID")
	}

	var r0 *domain.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (*domain.User, error)); ok {
		return rf(ctx, ID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) *domain.User); ok {
		r0 = rf(ctx, ID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, ID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUserRepository_GetUserByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserByID'
type MockUserRepository_GetUserByID_Call struct {
	*mock.Call
}

// GetUserByID is a helper method to define mock.On call
//   - ctx context.Context
//   - ID uuid.UUID
func (_e *MockUserRepository_Expecter) GetUserByID(ctx interface{}, ID interface{}) *MockUserRepository_GetUserByID_Call {
	return &MockUserRepository_GetUserByID_Call{Call: _e.mock.On("GetUserByID", ctx, ID)}
}

func (_c *MockUserRepository_GetUserByID_Call) Run(run func(ctx context.Context, ID uuid.UUID)) *MockUserRepository_GetUserByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *MockUserRepository_GetUserByID_Call) Return(_a0 *domain.User, _a1 error) *MockUserRepository_GetUserByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUserRepository_GetUserByID_Call) RunAndReturn(run func(context.Context, uuid.UUID) (*domain.User, error)) *MockUserRepository_GetUserByID_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateUserByID provides a mock function with given fields: ctx, ID, name, passwordHash
func (_m *MockUserRepository) UpdateUserByID(ctx context.Context, ID uuid.UUID, name string, passwordHash []byte) (*domain.User, error) {
	ret := _m.Called(ctx, ID, name, passwordHash)

	if len(ret) == 0 {
		panic("no return value specified for UpdateUserByID")
	}

	var r0 *domain.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, string, []byte) (*domain.User, error)); ok {
		return rf(ctx, ID, name, passwordHash)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, string, []byte) *domain.User); ok {
		r0 = rf(ctx, ID, name, passwordHash)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, string, []byte) error); ok {
		r1 = rf(ctx, ID, name, passwordHash)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUserRepository_UpdateUserByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateUserByID'
type MockUserRepository_UpdateUserByID_Call struct {
	*mock.Call
}

// UpdateUserByID is a helper method to define mock.On call
//   - ctx context.Context
//   - ID uuid.UUID
//   - name string
//   - passwordHash []byte
func (_e *MockUserRepository_Expecter) UpdateUserByID(ctx interface{}, ID interface{}, name interface{}, passwordHash interface{}) *MockUserRepository_UpdateUserByID_Call {
	return &MockUserRepository_UpdateUserByID_Call{Call: _e.mock.On("UpdateUserByID", ctx, ID, name, passwordHash)}
}

func (_c *MockUserRepository_UpdateUserByID_Call) Run(run func(ctx context.Context, ID uuid.UUID, name string, passwordHash []byte)) *MockUserRepository_UpdateUserByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(string), args[3].([]byte))
	})
	return _c
}

func (_c *MockUserRepository_UpdateUserByID_Call) Return(_a0 *domain.User, _a1 error) *MockUserRepository_UpdateUserByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUserRepository_UpdateUserByID_Call) RunAndReturn(run func(context.Context, uuid.UUID, string, []byte) (*domain.User, error)) *MockUserRepository_UpdateUserByID_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockUserRepository creates a new instance of MockUserRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockUserRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockUserRepository {
	mock := &MockUserRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
