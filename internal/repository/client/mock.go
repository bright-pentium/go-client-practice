// Code generated by mockery v2.43.2. DO NOT EDIT.

package client

import (
	context "context"

	domain "github.com/bright-pentium/go-client-practice/internal/domain"
	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// MockClientRepository is an autogenerated mock type for the IClientRepository type
type MockClientRepository struct {
	mock.Mock
}

type MockClientRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockClientRepository) EXPECT() *MockClientRepository_Expecter {
	return &MockClientRepository_Expecter{mock: &_m.Mock}
}

// CreateClient provides a mock function with given fields: ctx, ID, userID, scope, secretHash
func (_m *MockClientRepository) CreateClient(ctx context.Context, ID uuid.UUID, userID uuid.UUID, scope []domain.Permission, secretHash []byte) (*domain.Client, error) {
	ret := _m.Called(ctx, ID, userID, scope, secretHash)

	if len(ret) == 0 {
		panic("no return value specified for CreateClient")
	}

	var r0 *domain.Client
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, uuid.UUID, []domain.Permission, []byte) (*domain.Client, error)); ok {
		return rf(ctx, ID, userID, scope, secretHash)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, uuid.UUID, []domain.Permission, []byte) *domain.Client); ok {
		r0 = rf(ctx, ID, userID, scope, secretHash)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Client)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, uuid.UUID, []domain.Permission, []byte) error); ok {
		r1 = rf(ctx, ID, userID, scope, secretHash)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientRepository_CreateClient_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateClient'
type MockClientRepository_CreateClient_Call struct {
	*mock.Call
}

// CreateClient is a helper method to define mock.On call
//   - ctx context.Context
//   - ID uuid.UUID
//   - userID uuid.UUID
//   - scope []domain.Permission
//   - secretHash []byte
func (_e *MockClientRepository_Expecter) CreateClient(ctx interface{}, ID interface{}, userID interface{}, scope interface{}, secretHash interface{}) *MockClientRepository_CreateClient_Call {
	return &MockClientRepository_CreateClient_Call{Call: _e.mock.On("CreateClient", ctx, ID, userID, scope, secretHash)}
}

func (_c *MockClientRepository_CreateClient_Call) Run(run func(ctx context.Context, ID uuid.UUID, userID uuid.UUID, scope []domain.Permission, secretHash []byte)) *MockClientRepository_CreateClient_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(uuid.UUID), args[3].([]domain.Permission), args[4].([]byte))
	})
	return _c
}

func (_c *MockClientRepository_CreateClient_Call) Return(_a0 *domain.Client, _a1 error) *MockClientRepository_CreateClient_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientRepository_CreateClient_Call) RunAndReturn(run func(context.Context, uuid.UUID, uuid.UUID, []domain.Permission, []byte) (*domain.Client, error)) *MockClientRepository_CreateClient_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteClientByIDandUser provides a mock function with given fields: ctx, ID, userID
func (_m *MockClientRepository) DeleteClientByIDandUser(ctx context.Context, ID uuid.UUID, userID uuid.UUID) error {
	ret := _m.Called(ctx, ID, userID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteClientByIDandUser")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, uuid.UUID) error); ok {
		r0 = rf(ctx, ID, userID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockClientRepository_DeleteClientByIDandUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteClientByIDandUser'
type MockClientRepository_DeleteClientByIDandUser_Call struct {
	*mock.Call
}

// DeleteClientByIDandUser is a helper method to define mock.On call
//   - ctx context.Context
//   - ID uuid.UUID
//   - userID uuid.UUID
func (_e *MockClientRepository_Expecter) DeleteClientByIDandUser(ctx interface{}, ID interface{}, userID interface{}) *MockClientRepository_DeleteClientByIDandUser_Call {
	return &MockClientRepository_DeleteClientByIDandUser_Call{Call: _e.mock.On("DeleteClientByIDandUser", ctx, ID, userID)}
}

func (_c *MockClientRepository_DeleteClientByIDandUser_Call) Run(run func(ctx context.Context, ID uuid.UUID, userID uuid.UUID)) *MockClientRepository_DeleteClientByIDandUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(uuid.UUID))
	})
	return _c
}

func (_c *MockClientRepository_DeleteClientByIDandUser_Call) Return(_a0 error) *MockClientRepository_DeleteClientByIDandUser_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockClientRepository_DeleteClientByIDandUser_Call) RunAndReturn(run func(context.Context, uuid.UUID, uuid.UUID) error) *MockClientRepository_DeleteClientByIDandUser_Call {
	_c.Call.Return(run)
	return _c
}

// GetClientByID provides a mock function with given fields: ctx, ID
func (_m *MockClientRepository) GetClientByID(ctx context.Context, ID uuid.UUID) (*domain.Client, error) {
	ret := _m.Called(ctx, ID)

	if len(ret) == 0 {
		panic("no return value specified for GetClientByID")
	}

	var r0 *domain.Client
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (*domain.Client, error)); ok {
		return rf(ctx, ID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) *domain.Client); ok {
		r0 = rf(ctx, ID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Client)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, ID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientRepository_GetClientByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetClientByID'
type MockClientRepository_GetClientByID_Call struct {
	*mock.Call
}

// GetClientByID is a helper method to define mock.On call
//   - ctx context.Context
//   - ID uuid.UUID
func (_e *MockClientRepository_Expecter) GetClientByID(ctx interface{}, ID interface{}) *MockClientRepository_GetClientByID_Call {
	return &MockClientRepository_GetClientByID_Call{Call: _e.mock.On("GetClientByID", ctx, ID)}
}

func (_c *MockClientRepository_GetClientByID_Call) Run(run func(ctx context.Context, ID uuid.UUID)) *MockClientRepository_GetClientByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *MockClientRepository_GetClientByID_Call) Return(_a0 *domain.Client, _a1 error) *MockClientRepository_GetClientByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientRepository_GetClientByID_Call) RunAndReturn(run func(context.Context, uuid.UUID) (*domain.Client, error)) *MockClientRepository_GetClientByID_Call {
	_c.Call.Return(run)
	return _c
}

// ListClientsByUser provides a mock function with given fields: ctx, userID
func (_m *MockClientRepository) ListClientsByUser(ctx context.Context, userID uuid.UUID) ([]domain.Client, error) {
	ret := _m.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for ListClientsByUser")
	}

	var r0 []domain.Client
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) ([]domain.Client, error)); ok {
		return rf(ctx, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) []domain.Client); ok {
		r0 = rf(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Client)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientRepository_ListClientsByUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListClientsByUser'
type MockClientRepository_ListClientsByUser_Call struct {
	*mock.Call
}

// ListClientsByUser is a helper method to define mock.On call
//   - ctx context.Context
//   - userID uuid.UUID
func (_e *MockClientRepository_Expecter) ListClientsByUser(ctx interface{}, userID interface{}) *MockClientRepository_ListClientsByUser_Call {
	return &MockClientRepository_ListClientsByUser_Call{Call: _e.mock.On("ListClientsByUser", ctx, userID)}
}

func (_c *MockClientRepository_ListClientsByUser_Call) Run(run func(ctx context.Context, userID uuid.UUID)) *MockClientRepository_ListClientsByUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *MockClientRepository_ListClientsByUser_Call) Return(_a0 []domain.Client, _a1 error) *MockClientRepository_ListClientsByUser_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientRepository_ListClientsByUser_Call) RunAndReturn(run func(context.Context, uuid.UUID) ([]domain.Client, error)) *MockClientRepository_ListClientsByUser_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateClientByIDandUser provides a mock function with given fields: ctx, ID, userID, scope, secretHash
func (_m *MockClientRepository) UpdateClientByIDandUser(ctx context.Context, ID uuid.UUID, userID uuid.UUID, scope []domain.Permission, secretHash []byte) (*domain.Client, error) {
	ret := _m.Called(ctx, ID, userID, scope, secretHash)

	if len(ret) == 0 {
		panic("no return value specified for UpdateClientByIDandUser")
	}

	var r0 *domain.Client
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, uuid.UUID, []domain.Permission, []byte) (*domain.Client, error)); ok {
		return rf(ctx, ID, userID, scope, secretHash)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, uuid.UUID, []domain.Permission, []byte) *domain.Client); ok {
		r0 = rf(ctx, ID, userID, scope, secretHash)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Client)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, uuid.UUID, []domain.Permission, []byte) error); ok {
		r1 = rf(ctx, ID, userID, scope, secretHash)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientRepository_UpdateClientByIDandUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateClientByIDandUser'
type MockClientRepository_UpdateClientByIDandUser_Call struct {
	*mock.Call
}

// UpdateClientByIDandUser is a helper method to define mock.On call
//   - ctx context.Context
//   - ID uuid.UUID
//   - userID uuid.UUID
//   - scope []domain.Permission
//   - secretHash []byte
func (_e *MockClientRepository_Expecter) UpdateClientByIDandUser(ctx interface{}, ID interface{}, userID interface{}, scope interface{}, secretHash interface{}) *MockClientRepository_UpdateClientByIDandUser_Call {
	return &MockClientRepository_UpdateClientByIDandUser_Call{Call: _e.mock.On("UpdateClientByIDandUser", ctx, ID, userID, scope, secretHash)}
}

func (_c *MockClientRepository_UpdateClientByIDandUser_Call) Run(run func(ctx context.Context, ID uuid.UUID, userID uuid.UUID, scope []domain.Permission, secretHash []byte)) *MockClientRepository_UpdateClientByIDandUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(uuid.UUID), args[3].([]domain.Permission), args[4].([]byte))
	})
	return _c
}

func (_c *MockClientRepository_UpdateClientByIDandUser_Call) Return(_a0 *domain.Client, _a1 error) *MockClientRepository_UpdateClientByIDandUser_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientRepository_UpdateClientByIDandUser_Call) RunAndReturn(run func(context.Context, uuid.UUID, uuid.UUID, []domain.Permission, []byte) (*domain.Client, error)) *MockClientRepository_UpdateClientByIDandUser_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockClientRepository creates a new instance of MockClientRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockClientRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockClientRepository {
	mock := &MockClientRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
